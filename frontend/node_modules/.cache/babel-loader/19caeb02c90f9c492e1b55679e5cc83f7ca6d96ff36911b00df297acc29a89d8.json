{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victo\\\\BofA-Code-A-Thon\\\\frontend\\\\src\\\\components\\\\UniversitySelector.tsx\",\n  _s = $RefreshSig$();\n// UniversitySelector.tsx\nimport React, { useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = \"https://buwbxnzdbgszvfqxmgfy.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ1d2J4bnpkYmdzenZmcXhtZ2Z5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI2Mjc4ODQsImV4cCI6MjA1ODIwMzg4NH0.ZLLi-76N_X2t-2NUpbVj1VWHhVT6nMkPZCoAYdbKa50\";\nconsole.log('Supabase URL:', supabaseUrl);\nconsole.log('Supabase Key exists:', !!supabaseKey);\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst UniversitySelector = ({\n  selectedUniversity,\n  setSelectedUniversity,\n  onAddUniversity\n}) => {\n  _s();\n  console.log('UniversitySelector component mounted');\n  const predefinedUniversities = [\"New Jersey Institute of Technology\", \"Rutgers New Brunswick\", \"University of Texas, Arlington\", \"North Carolina A&T University\", \"Kennesaw State University\", \"Howard University\", \"Tennessee State University\", \"Johnson C. Smith University\", \"University of North Carolina, Charlotte\"];\n  const [newUniversity, setNewUniversity] = React.useState('');\n  const [message, setMessage] = React.useState('');\n  const handleAddUniversity = async () => {\n    if (newUniversity.trim() === '') {\n      setMessage(\"Please enter a university name.\");\n      return;\n    }\n    // Insert into your Supabase table (this example assumes you're doing that)\n    const {\n      data,\n      error\n    } = await supabase.from('university_courses').insert([{\n      university_name: newUniversity,\n      matched_courses: {},\n      links: \"\",\n      // Provide an empty string or some default\n      all_courses: {} // Or {} if you prefer an object\n    }]);\n    if (error) {\n      console.error(\"Error adding university:\", error);\n      setMessage(\"Error adding university.\");\n    } else {\n      console.log(\"Added university:\", data);\n      setMessage(\"University added successfully!\");\n      // Optionally update the selected university\n      setSelectedUniversity(newUniversity);\n      // And/or call a provided callback\n      if (onAddUniversity) {\n        onAddUniversity(newUniversity);\n      }\n      setNewUniversity('');\n    }\n  };\n  const initializeUniversities = async () => {\n    console.log('Starting university initialization');\n    for (const university of predefinedUniversities) {\n      console.log(`Processing ${university}`);\n      try {\n        // Check if university exists\n        const {\n          data: existingUniversity,\n          error: checkError\n        } = await supabase.from('university_courses').select('university_name').eq('university_name', university).single();\n        if (checkError) {\n          console.error(`Error checking ${university}:`, checkError);\n          continue;\n        }\n        if (!existingUniversity) {\n          const {\n            data,\n            error\n          } = await supabase.from('university_courses').insert([{\n            university_name: university,\n            matched_courses: {},\n            links: \"\",\n            // Provide an empty string or a default link\n            all_courses: [] // Or {}\n          }]).select();\n          if (error) {\n            console.error(`Error adding ${university}:`, error);\n          } else {\n            console.log(`Successfully added ${university}`);\n          }\n        } else {\n          console.log(`${university} already exists`);\n        }\n      } catch (error) {\n        console.error(`Unexpected error processing ${university}:`, error);\n      }\n    }\n  };\n  useEffect(() => {\n    console.log('Running initialization effect');\n    initializeUniversities();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center p-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col md:flex-row items-center gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"university-dropdown\",\n        className: \"text-2xl font-extrabold text-indigo-600 uppercase tracking-wider\",\n        children: \"Select a university:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"university-dropdown\",\n        value: selectedUniversity,\n        onChange: e => setSelectedUniversity(e.target.value),\n        className: \"rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-2\",\n        children: predefinedUniversities.map((uni, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: uni,\n          children: uni\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-gray-600 font-medium\",\n        children: \"or add your university:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter university name\",\n        value: newUniversity,\n        onChange: e => setNewUniversity(e.target.value),\n        className: \"rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddUniversity,\n        className: \"bg-indigo-600 text-white px-6 py-2 rounded-lg hover:bg-indigo-700 transition-colors\",\n        children: \"Add University\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `text-sm ${message.includes('Error') ? 'text-red-600' : 'text-green-600'}`,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(UniversitySelector, \"CabjRYB3NpvN4ULYC7KGyMBlh7E=\");\n_c = UniversitySelector;\nexport default UniversitySelector;\nvar _c;\n$RefreshReg$(_c, \"UniversitySelector\");","map":{"version":3,"names":["React","useEffect","createClient","jsxDEV","_jsxDEV","supabaseUrl","supabaseKey","console","log","supabase","UniversitySelector","selectedUniversity","setSelectedUniversity","onAddUniversity","_s","predefinedUniversities","newUniversity","setNewUniversity","useState","message","setMessage","handleAddUniversity","trim","data","error","from","insert","university_name","matched_courses","links","all_courses","initializeUniversities","university","existingUniversity","checkError","select","eq","single","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","e","target","map","uni","index","type","placeholder","onClick","includes","_c","$RefreshReg$"],"sources":["C:/Users/victo/BofA-Code-A-Thon/frontend/src/components/UniversitySelector.tsx"],"sourcesContent":["// UniversitySelector.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl =\"https://buwbxnzdbgszvfqxmgfy.supabase.co\";\r\nconst supabaseKey =\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ1d2J4bnpkYmdzenZmcXhtZ2Z5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI2Mjc4ODQsImV4cCI6MjA1ODIwMzg4NH0.ZLLi-76N_X2t-2NUpbVj1VWHhVT6nMkPZCoAYdbKa50\";\r\n\r\nconsole.log('Supabase URL:', supabaseUrl);\r\nconsole.log('Supabase Key exists:', !!supabaseKey);\r\n\r\nconst supabase = createClient(supabaseUrl!, supabaseKey!);\r\n\r\ninterface UniversitySelectorProps {\r\n  selectedUniversity: string;\r\n  setSelectedUniversity: (value: string) => void;\r\n  // Optional: callback when a new university is added\r\n  onAddUniversity?: (newUniversity: string) => void;\r\n}\r\n\r\nconst UniversitySelector: React.FC<UniversitySelectorProps> = ({ selectedUniversity, setSelectedUniversity, onAddUniversity }) => {\r\n  console.log('UniversitySelector component mounted');\r\n  \r\n  const predefinedUniversities = [\r\n    \"New Jersey Institute of Technology\",\r\n    \"Rutgers New Brunswick\",\r\n    \"University of Texas, Arlington\",\r\n    \"North Carolina A&T University\",\r\n    \"Kennesaw State University\",\r\n    \"Howard University\",\r\n    \"Tennessee State University\",\r\n    \"Johnson C. Smith University\",\r\n    \"University of North Carolina, Charlotte\"\r\n  ];\r\n  \r\n  const [newUniversity, setNewUniversity] = React.useState('');\r\n  const [message, setMessage] = React.useState('');\r\n\r\n  const handleAddUniversity = async () => {\r\n    if (newUniversity.trim() === '') {\r\n      setMessage(\"Please enter a university name.\");\r\n      return;\r\n    }\r\n    // Insert into your Supabase table (this example assumes you're doing that)\r\n    const { data, error } = await supabase\r\n      .from('university_courses')\r\n      .insert([{ \r\n        university_name: newUniversity, \r\n        matched_courses: {}, \r\n        links: \"\",          // Provide an empty string or some default\r\n        all_courses: {}     // Or {} if you prefer an object\r\n      }]);\r\n\r\n    if (error) {\r\n      console.error(\"Error adding university:\", error);\r\n      setMessage(\"Error adding university.\");\r\n    } else {\r\n      console.log(\"Added university:\", data);\r\n      setMessage(\"University added successfully!\");\r\n      // Optionally update the selected university\r\n      setSelectedUniversity(newUniversity);\r\n      // And/or call a provided callback\r\n      if (onAddUniversity) {\r\n        onAddUniversity(newUniversity);\r\n      }\r\n      setNewUniversity('');\r\n    }\r\n  };\r\n\r\n  const initializeUniversities = async () => {\r\n    console.log('Starting university initialization');\r\n    \r\n    for (const university of predefinedUniversities) {\r\n      console.log(`Processing ${university}`);\r\n      \r\n      try {\r\n        // Check if university exists\r\n        const { data: existingUniversity, error: checkError } = await supabase\r\n          .from('university_courses')\r\n          .select('university_name')\r\n          .eq('university_name', university)\r\n          .single();\r\n\r\n        if (checkError) {\r\n          console.error(`Error checking ${university}:`, checkError);\r\n          continue;\r\n        }\r\n\r\n        if (!existingUniversity) {\r\n          const { data, error } = await supabase\r\n            .from('university_courses')\r\n            .insert([{ \r\n              university_name: university, \r\n              matched_courses: {},\r\n              links: \"\",       // Provide an empty string or a default link\r\n              all_courses: []  // Or {}\r\n            }])\r\n            .select();\r\n\r\n          if (error) {\r\n            console.error(`Error adding ${university}:`, error);\r\n          } else {\r\n            console.log(`Successfully added ${university}`);\r\n          }\r\n        } else {\r\n          console.log(`${university} already exists`);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Unexpected error processing ${university}:`, error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Running initialization effect');\r\n    initializeUniversities();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center p-5\">\r\n      <div className=\"flex flex-col md:flex-row items-center gap-4\">\r\n        <label \r\n          htmlFor=\"university-dropdown\" \r\n          className=\"text-2xl font-extrabold text-indigo-600 uppercase tracking-wider\"\r\n        >\r\n          Select a university:\r\n        </label>\r\n        \r\n        <select\r\n          id=\"university-dropdown\"\r\n          value={selectedUniversity}\r\n          onChange={(e) => setSelectedUniversity(e.target.value)}\r\n          className=\"rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-2\"\r\n        >\r\n          {predefinedUniversities.map((uni, index) => (\r\n            <option key={index} value={uni}>{uni}</option>\r\n          ))}\r\n        </select>\r\n\r\n        <span className=\"text-gray-600 font-medium\">or add your university:</span>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter university name\"\r\n          value={newUniversity}\r\n          onChange={(e) => setNewUniversity(e.target.value)}\r\n          className=\"rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-2\"\r\n        />\r\n\r\n        <button \r\n          onClick={handleAddUniversity}\r\n          className=\"bg-indigo-600 text-white px-6 py-2 rounded-lg hover:bg-indigo-700 transition-colors\"\r\n        >\r\n          Add University\r\n        </button>\r\n\r\n        {message && (\r\n          <p className={`text-sm ${message.includes('Error') ? 'text-red-600' : 'text-green-600'}`}>\r\n            {message}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UniversitySelector;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}